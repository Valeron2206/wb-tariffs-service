#!/bin/bash

# Health check script –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

echo "üîç Checking WB Tariffs Service health..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo "üì¶ Checking Docker containers..."
docker compose ps

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
echo "üìã Latest application logs:"
docker compose logs --tail=10 app

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "üóÑÔ∏è Checking database connection..."
docker compose exec -T postgres pg_isready -U postgres
if [ $? -eq 0 ]; then
    echo "‚úÖ Database is ready"
else
    echo "‚ùå Database is not ready"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ
echo "üìä Database statistics:"
docker compose exec -T postgres psql -U postgres -d postgres -c "
SELECT 
    COUNT(*) as total_records,
    COUNT(DISTINCT date) as unique_dates,
    COUNT(DISTINCT warehouse_id) as unique_warehouses,
    MIN(date) as earliest_date,
    MAX(date) as latest_date
FROM tariffs;
"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
echo "üìÖ Latest data by date:"
docker compose exec -T postgres psql -U postgres -d postgres -c "
SELECT date, COUNT(*) as records_count 
FROM tariffs 
GROUP BY date 
ORDER BY date DESC 
LIMIT 5;
"

echo "‚úÖ Health check completed!"

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
 */
async healthCheck(): Promise<boolean> {
  try {
    const currentDate = new Date().toISOString().split('T')[0];
    
    const response = await axios.get(`${this.baseUrl}${this.tariffEndpoint}`, {
      headers: {
        'Authorization': this.apiKey,
        'Content-Type': 'application/json',
      },
      params: {
        date: currentDate  // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä date
      },
      timeout: 10000,
    });

    return response.status === 200;
  } catch (error) {
    this.logger.error('WB API health check failed', error);
    return false;
  }
}